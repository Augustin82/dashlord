{"@version":"2.10.0","@generated":"Wed, 18 Aug 2021 10:55:59","site":[{"@name":"https://my.fabnum.fr","@host":"my.fabnum.fr","@port":"443","@ssl":"true","alerts":[{"pluginid":"10063","alertRef":"10063","alert":"Permissions Policy Header Not Set","name":"Permissions Policy Header Not Set","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>Permissions Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Permissions Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/canvas-to-blob.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/async-3.2.0.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/sitemap.xml","method":"GET"},{"uri":"https://my.fabnum.fr/%7B%7Baction%7D%7D","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/slick.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/bootstrap.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-route.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-loader.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"}],"count":"11","solution":"<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Permissions-Policy header.<\/p>","reference":"<p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy<\/p><p>https://developers.google.com/web/updates/2018/06/feature-policy<\/p><p>https://scotthelme.co.uk/a-new-security-header-feature-policy/<\/p><p>https://w3c.github.io/webappsec-feature-policy/<\/p><p>https://www.smashingmagazine.com/2018/12/feature-policy/<\/p>","cweid":"693","wascid":"15","sourceid":"3"},{"pluginid":"10049","alertRef":"10049","alert":"Storable and Cacheable Content","name":"Storable and Cacheable Content","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The response contents are storable by caching components such as proxy servers, and may be retrieved directly from the cache, rather than from the origin server by the caching servers, in response to similar requests from other users.  If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where \"shared\" caching servers such as \"proxy\" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/slick.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/%7B%7Baction%7D%7D","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/bootstrap-slider/bootstrap-slider.min.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/Chart/Chart.min.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/theme.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/robots.txt","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/angular-ui-notification.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"},{"uri":"https://my.fabnum.fr/sitemap.xml","method":"GET"},{"uri":"https://my.fabnum.fr/","method":"GET"},{"uri":"https://my.fabnum.fr/3rdparty/fontawesome/css/all.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET"}],"count":"10","solution":"<p>Validate that the response does not contain sensitive, personal or user-specific information.  If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:<\/p><p>Cache-Control: no-cache, no-store, must-revalidate, private<\/p><p>Pragma: no-cache<\/p><p>Expires: 0<\/p><p>This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request. <\/p>","otherinfo":"<p>In the absence of an explicitly specified caching lifetime directive in the response, a liberal lifetime heuristic of 1 year was assumed. This is permitted by rfc7234.<\/p>","reference":"<p>https://tools.ietf.org/html/rfc7234<\/p><p>https://tools.ietf.org/html/rfc7231<\/p><p>http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)<\/p>","cweid":"524","wascid":"13","sourceid":"3"},{"pluginid":"10096","alertRef":"10096","alert":"Timestamp Disclosure - Unix","name":"Timestamp Disclosure - Unix","riskcode":"0","confidence":"1","riskdesc":"Informational (Low)","desc":"<p>A timestamp was disclosed by the application/web server - Unix<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1309151649"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1839030562"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1770035416"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1073741823"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"38016083"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1700485571"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1804603682"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"76029189"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1236535329"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1272893353"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"271733878"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1200080426"},{"uri":"https://my.fabnum.fr/theme.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"80000000"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1732584193"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1735328473"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1126891415"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"606105819"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1163531501"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"56613888"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-md5.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"1073741824"}],"count":"27","solution":"<p>Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.<\/p>","otherinfo":"<p>1309151649, which evaluates to: 2011-06-27 05:14:09<\/p>","reference":"<p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10035","alertRef":"10035","alert":"Strict-Transport-Security Header Not Set","name":"Strict-Transport-Security Header Not Set","riskcode":"1","confidence":"3","riskdesc":"Low (High)","desc":"<p>HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.<\/p>","instances":[{"uri":"https://my.fabnum.fr/%7B%7Baction%7D%7D","method":"GET"},{"uri":"https://my.fabnum.fr/sitemap.xml","method":"GET"}],"count":"2","solution":"<p>Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.<\/p>","reference":"<p>https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html<\/p><p>https://owasp.org/www-community/Security_Headers<\/p><p>http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security<\/p><p>http://caniuse.com/stricttransportsecurity<\/p><p>http://tools.ietf.org/html/rfc6797<\/p>","cweid":"319","wascid":"15","sourceid":"3"},{"pluginid":"10027","alertRef":"10027","alert":"Information Disclosure - Suspicious Comments","name":"Information Disclosure - Suspicious Comments","riskcode":"0","confidence":"1","riskdesc":"Informational (Low)","desc":"<p>The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/autofill-event.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"later"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"db"},{"uri":"https://my.fabnum.fr/3rdparty/js/async-3.2.0.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"select"},{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"username"},{"uri":"https://my.fabnum.fr/3rdparty/js/autofill-event.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"username"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-animate.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"from"},{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"db"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-ui-notification.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"later"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-sanitize.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"from"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"select"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"from"},{"uri":"https://my.fabnum.fr/3rdparty/js/slick.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"from"}],"count":"12","solution":"<p>Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.<\/p>","otherinfo":"<p>The following pattern was used: \\bLATER\\b and was detected in the element starting with: \"    // form fields a little later...\", see evidence field for the suspicious comment/snippet.<\/p>","reference":"<p><\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10109","alertRef":"10109","alert":"Modern Web Application","name":"Modern Web Application","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/ui-bootstrap-tpls-1.3.3.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"<a role=\"button\" data-toggle=\"collapse\" href aria-expanded=\"{{isOpen}}\" aria-controls=\"{{::panelId}}\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" uib-accordion-transclude=\"heading\"><span uib-accordion-header ng-class=\"{\\'text-muted\\': isDisabled}\">{{heading}}<\/span><\/a>"},{"uri":"https://my.fabnum.fr/","method":"GET","evidence":"<a ng-click=\"openSubscriptionSetup()\" style=\"cursor: pointer\">\n                        <span class=\"badge badge-success\">{{ subscription.plan.id === 'free' ? 'Set up' : 'Reactivate' }} Subscription<\/span>\n                      <\/a>"},{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"<a href='#'><\/a>"}],"count":"3","solution":"<p>This is an informational alert and so no changes are required.<\/p>","otherinfo":"<p>Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.<\/p>","reference":"<p><\/p>","sourceid":"3"},{"pluginid":"10038","alertRef":"10038","alert":"Content Security Policy (CSP) Header Not Set","name":"Content Security Policy (CSP) Header Not Set","riskcode":"2","confidence":"3","riskdesc":"Medium (High)","desc":"<p>Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.<\/p>","instances":[{"uri":"https://my.fabnum.fr/sitemap.xml","method":"GET"},{"uri":"https://my.fabnum.fr/%7B%7Baction%7D%7D","method":"GET"}],"count":"2","solution":"<p>Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: \"Content-Security-Policy\" for Chrome 25+, Firefox 23+ and Safari 7+, \"X-Content-Security-Policy\" for Firefox 4.0+ and Internet Explorer 10+, and \"X-WebKit-CSP\" for Chrome 14+ and Safari 6+.<\/p>","reference":"<p>https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy<\/p><p>https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://w3c.github.io/webappsec/specs/content-security-policy/csp-specification.dev.html<\/p><p>http://www.html5rocks.com/en/tutorials/security/content-security-policy/<\/p><p>http://caniuse.com/#feat=contentsecuritypolicy<\/p><p>http://content-security-policy.com/<\/p>","cweid":"693","wascid":"15","sourceid":"3"},{"pluginid":"10055","alertRef":"10055","alert":"CSP: script-src unsafe-inline","name":"CSP: script-src unsafe-inline","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>script-src includes unsafe-inline.<\/p>","instances":[{"uri":"https://my.fabnum.fr/","method":"GET","evidence":"default-src 'none'; frame-src 'self' cloudron.io *.cloudron.io; connect-src wss: https: 'self' *.cloudron.io; script-src https: 'self' 'unsafe-inline' 'unsafe-eval'; img-src * data:; style-src https: 'unsafe-inline'; object-src 'none'; font-src https: 'self'; frame-ancestors 'none'; base-uri 'none'; form-action 'self';"}],"count":"1","solution":"<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.<\/p>","reference":"<p>http://www.w3.org/TR/CSP2/<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://caniuse.com/#search=content+security+policy<\/p><p>http://content-security-policy.com/<\/p><p>https://github.com/shapesecurity/salvation<\/p><p>https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources<\/p>","cweid":"693","wascid":"15","sourceid":"3"},{"pluginid":"10003","alertRef":"10003","alert":"Vulnerable JS Library","name":"Vulnerable JS Library","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>The identified library angularjs, version 1.5.8 is vulnerable.<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/angular-cookies.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*\n AngularJS v1.5.8"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-sanitize.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*\n AngularJS v1.5.8"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-loader.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*\n AngularJS v1.5.8"},{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*! jQuery v1.11.0"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*\n AngularJS v1.5.8"},{"uri":"https://my.fabnum.fr/3rdparty/js/bootstrap.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/3rdparty/js/bootstrap.min.js"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-route.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*\n AngularJS v1.5.8"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-animate.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"/*\n AngularJS v1.5.8"}],"count":"8","solution":"<p>Please upgrade to the latest version of angularjs.<\/p>","otherinfo":"<p>CVE-2020-7676<\/p><p><\/p>","reference":"<p>https://github.com/angular/angular.js/blob/master/CHANGELOG.md#169-fiery-basilisk-2018-02-02<\/p><p>https://github.com/mozilla/addons-linter/issues/1000#issuecomment-282083435<\/p><p>https://github.com/angular/angular.js/blob/master/CHANGELOG.md<\/p><p>https://vulnerabledoma.in/ngSanitize1.6.8_bypass.html<\/p><p>http://pastebin.com/raw/kGrdaypP<\/p><p>https://github.com/angular/angular.js/commit/726f49dcf6c23106ddaf5cfd5e2e592841db743a<\/p><p>https://github.com/advisories/GHSA-5cp4-xmrw-59wf<\/p><p>https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94<\/p><p>https://nvd.nist.gov/vuln/detail/CVE-2020-7676<\/p><p>https://github.com/angular/angular.js/blob/master/CHANGELOG.md#179-pollution-eradication-2019-11-19<\/p><p>https://github.com/angular/angular.js/pull/15699<\/p><p><\/p>","cweid":"829","sourceid":"3"},{"pluginid":"10015","alertRef":"10015","alert":"Incomplete or No Cache-control Header Set","name":"Incomplete or No Cache-control Header Set","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>The cache-control header has not been set properly or is missing, allowing the browser and proxies to cache content.<\/p>","instances":[{"uri":"https://my.fabnum.fr/","method":"GET","param":"Cache-Control"},{"uri":"https://my.fabnum.fr/robots.txt","method":"GET","param":"Cache-Control"}],"count":"2","solution":"<p>Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate.<\/p>","reference":"<p>https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html#web-content-caching<\/p><p>https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control<\/p>","cweid":"525","wascid":"13","sourceid":"3"},{"pluginid":"10110","alertRef":"10110","alert":"Dangerous JS Functions","name":"Dangerous JS Functions","riskcode":"1","confidence":"1","riskdesc":"Low (Low)","desc":"<p>A dangerous JS function seems to be in use that would leave the site vulnerable.<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/angular-ui-notification.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"trustAsHtml"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-route.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"eval"},{"uri":"https://my.fabnum.fr/3rdparty/js/ui-bootstrap-tpls-1.3.3.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"trustAsHtml"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-bootstrap-multiselect.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"eval"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"eval"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-translate.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"trustAsHtml"},{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"eval"}],"count":"7","solution":"<p>See the references for security advice on the use of these functions.<\/p>","reference":"<p>https://angular.io/guide/security<\/p>","cweid":"749","sourceid":"3"},{"pluginid":"10094","alertRef":"10094","alert":"Base64 Disclosure","name":"Base64 Disclosure","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>Base64 encoded data was disclosed by the application/web server. Note: in the interests of performance not all base64 strings in the response were analyzed individually, the entire response should be looked at by the analyst/security team/developer(s).<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/jquery.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"D27CDB6E-AE6D-11cf-96B8-444553540000"},{"uri":"https://my.fabnum.fr/theme.css?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":""},{"uri":"https://my.fabnum.fr/js/index.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":""},{"uri":"https://my.fabnum.fr/api/v1/cloudron/avatar","method":"GET","evidence":"14fc-SNSlHzlnjngSseu+L02+EKMbf1A"},{"uri":"https://my.fabnum.fr/3rdparty/js/showdown-1.9.1.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"disableForced4SpacesIndentedSublists"},{"uri":"https://my.fabnum.fr/3rdparty/js/angular-base64.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"}],"count":"6","solution":"<p>Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.<\/p>","otherinfo":"<p>\\x000fn�\\x000c\\x001e��\\x0001:\\x000f�uq���\\x001f>�9�~x�M4<\/p>","reference":"<p>http://projects.webappsec.org/w/page/13246936/Information%20Leakage<\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10099","alertRef":"10099","alert":"Source Code Disclosure - Java","name":"Source Code Disclosure - Java","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>Application Source Code was disclosed by the web server - Java<\/p>","instances":[{"uri":"https://my.fabnum.fr/3rdparty/js/async-3.2.0.min.js?366949753194ccb941d2cd07130d5d24c17ac365","method":"GET","evidence":"class ot{constructor(){this.heap=[],this.pushCount=Number.MIN_SAFE_INTEGER}get length(){return this.heap.length}empty(){return this.heap=[],this}percUp(e){for(let a;0<e&&te(this.heap[e],this.heap[a=ee(e)]);){let n=this.heap[e];this.heap[e]=this.heap[a],this.heap[a]=n,e=a}}percDown(e){for(let a,n;(a=$(e))<this.heap.length&&(a+1<this.heap.length&&te(this.heap[a+1],this.heap[a])&&++a,!te(this.heap[e],this.heap[a]));)n=this.heap[e],this.heap[e]=this.heap[a],this.heap[a]=n,e=a}push(e){e.pushCount=++this.pushCount,this.heap.push(e),this.percUp(this.heap.length-1)}unshift(e){return this.heap.push(e)}shift(){let[e]=this.heap;return this.heap[0]=this.heap[this.heap.length-1],this.heap.pop(),this.percDown(0),e}toArray(){return[...this]}*[Symbol.iterator](){for(let e=0;e<this.heap.length;e++)yield this.heap[e].data}remove(e){let t=0;for(let a=0;a<this.heap.length;a++)e(this.heap[a])||(this.heap[t]=this.heap[a],t++);this.heap.splice(t);for(let t=ee(this.heap.length-1);0<=t;t--)this.percDown(t);return this}}var ht=o(function(e,t){if(t=m(t),!Array.isArray(e))return t(new TypeError(\"First argument to race must be an array of functions\"));if(!e.length)return t();for(var a=0,n=e.length;a<n;a++)d(e[a])(t)},2),ft=o(function(e,t,a){return se(Me,e,t,a)},3),yt=o(function(e,t,a,n){return se(Oe(t),e,a,n)},4),mt=o(function(e,t,a){return se(je,e,t,a)},3);const gt=5,kt=0;var vt=o(function(e,t,a){return R(Boolean,e=>e)(Me,e,t,a)},3),St=o(function(e,t,a,n){return R(Boolean,e=>e)(Oe(t),e,a,n)},4),Lt=o(function(e,t,a){return R(Boolean,e=>e)(je,e,t,a)},3),xt=o(function(e,t,a){function n(e,t){var n=e.criteria,a=t.criteria;return n<a?-1:n>a?1:0}var i=d(t);return Ae(e,(e,t)=>{i(e,(a,n)=>a?t(a):void t(a,{value:e,criteria:n}))},(e,t)=>e?a(e):void a(null,t.sort(n).map(e=>e.value)))},3),Et=o(function(e,t){var a,n=null;return $e(e,(e,t)=>{d(e)((e,...i)=>!1===e?t(e):void(2>i.length?[a]=i:a=i,n=e,t(e?null:{})))},()=>t(n,a))}),bt=o(function(e,t,a){function n(e,...t){if(e)return a(e);l=t;!1===e||s(i)}function i(e,t){return e?a(e):!1===e?void 0:t?void r(n):a(null,...l)}a=x(a);var r=d(t),s=d(e),l=[];return s(i)},3),Ot=o(function(e,t){function a(t){var a=d(e[i++]);a(...t,x(n))}function n(n,...r){return!1===n?void 0:n||i===e.length?t(n,...r):void a(r)}if(t=m(t),!Array.isArray(e))return t(new Error(\"First argument to waterfall must be an array of functions\"));if(!e.length)return t();var i=0;a([])});e.default={apply:t,applyEach:Ie,applyEachSeries:Be,asyncify:r,auto:M,autoInject:I,cargo:B,cargoQueue:F,compose:C,concat:Qe,concatLimit:De,concatSeries:Ue,constant:P,detect:Ge,detectLimit:We,detectSeries:He,dir:Je,doUntil:N,doWhilst:Ke,each:Xe,eachLimit:Ze,eachOf:Me,eachOfLimit:_e,eachOfSeries:je,eachSeries:$e,ensureAsync:Y,every:et,everyLimit:tt,everySeries:at,filter:nt,filterLimit:it,filterSeries:rt,forever:st,groupBy:U,groupByLimit:lt,groupBySeries:G,log:ut,map:Ae,mapLimit:qe,mapSeries:we,mapValues:W,mapValuesLimit:ct,mapValuesSeries:H,memoize:J,nextTick:pt,parallel:K,parallelLimit:X,priorityQueue:ae,queue:Z,race:ht,reduce:Ye,reduceRight:ne,reflect:ie,reflectAll:re,reject:ft,rejectLimit:yt,rejectSeries:mt,retry:ue,retryable:pe,seq:T,series:de,setImmediate:Ee,some:vt,someLimit:St,someSeries:Lt,sortBy:xt,timeout:oe,times:ye,timesLimit:fe,timesSeries:me,transform:ge,tryEach:Et,unmemoize:ke,until:ve,waterfall:Ot,whilst:bt,all:et,allLimit:tt,allSeries:at,any:vt,anyLimit:St,anySeries:Lt,find:Ge,findLimit:We,findSeries:He,flatMap:Qe,flatMapLimit:De,flatMapSeries:Ue,forEach:Xe,forEachSeries:$e,forEachLimit:Ze,forEachOf:Me,forEachOfSeries:je,forEachOfLimit:_e,inject:Ye,foldl:Ye,foldr:ne,select:nt,selectLimit:it,selectSeries:rt,wrapSync:r,during:bt,doDuring:Ke},e.apply=t,e.applyEach=Ie,e.applyEachSeries=Be,e.asyncify=r,e.auto=M,e.autoInject=I,e.cargo=B,e.cargoQueue=F,e.compose=C,e.concat=Qe,e.concatLimit=De,e.concatSeries=Ue,e.constant=P,e.detect=Ge,e.detectLimit=We,e.detectSeries=He,e.dir=Je,e.doUntil=N,e.doWhilst=Ke,e.each=Xe,e.eachLimit=Ze,e.eachOf=Me,e.eachOfLimit=_e,e.eachOfSeries=je,e.eachSeries=$e,e.ensureAsync=Y,e.every=et,e.everyLimit=tt,e.everySeries=at,e.filter=nt,e.filterLimit=it,e.filterSeries=rt,e.forever=st,e.groupBy=U,e.groupByLimit=lt,e.groupBySeries=G,e.log=ut,e.map=Ae,e.mapLimit=qe,e.mapSeries=we,e.mapValues=W,e.mapValuesLimit=ct,e.mapValuesSeries=H,e.memoize=J,e.nextTick=pt,e.parallel=K,e.parallelLimit=X,e.priorityQueue=ae,e.queue=Z,e.race=ht,e.reduce=Ye,e.reduceRight=ne,e.reflect=ie,e.reflectAll=re,e.reject=ft,e.rejectLimit=yt,e.rejectSeries=mt,e.retry=ue,e.retryable=pe,e.seq=T,e.series=de,e.setImmediate=Ee,e.some=vt,e.someLimit=St,e.someSeries=Lt,e.sortBy=xt,e.timeout=oe,e.times=ye,e.timesLimit=fe,e.timesSeries=me,e.transform=ge,e.tryEach=Et,e.unmemoize=ke,e.until=ve,e.waterfall=Ot,e.whilst=bt,e.all=et,e.allLimit=tt,e.allSeries=at,e.any=vt,e.anyLimit=St,e.anySeries=Lt,e.find=Ge,e.findLimit=We,e.findSeries=He,e.flatMap=Qe,e.flatMapLimit=De,e.flatMapSeries=Ue,e.forEach=Xe,e.forEachSeries=$e,e.forEachLimit=Ze,e.forEachOf=Me,e.forEachOfSeries=je,e.forEachOfLimit=_e,e.inject=Ye,e.foldl=Ye,e.foldr=ne,e.select=nt,e.selectLimit=it,e.selectSeries=rt,e.wrapSync=r,e.during=bt,e.doDuring=Ke,Object.defineProperty(e,\"__esModule\",{value:!0})}"}],"count":"1","solution":"<p>Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server. <\/p>","otherinfo":"<p>class ot{constructor(){this.heap=[],this.pushCount=Number.MIN_SAFE_INTEGER}get length(){return this.heap.length}empty(){return this.heap=[],this}percUp(e){for(let a;0<e&&te(this.heap[e],this.heap[a=ee(e)]);){let n=this.heap[e];this.heap[e]=this.heap[a],this.heap[a]=n,e=a}}percDown(e){for(let a,n;(a=$(e))<this.heap.length&&(a+1<this.heap.length&&te(this.heap[a+1],this.heap[a])&&++a,!te(this.heap[e],this.heap[a]));)n=this.heap[e],this.heap[e]=this.heap[a],this.heap[a]=n,e=a}push(e){e.pushCount=++this.pushCount,this.heap.push(e),this.percUp(this.heap.length-1)}unshift(e){return this.heap.push(e)}shift(){let[e]=this.heap;return this.heap[0]=this.heap[this.heap.length-1],this.heap.pop(),this.percDown(0),e}toArray(){return[...this]}*[Symbol.iterator](){for(let e=0;e<this.heap.length;e++)yield this.heap[e].data}remove(e){let t=0;for(let a=0;a<this.heap.length;a++)e(this.heap[a])||(this.heap[t]=this.heap[a],t++);this.heap.splice(t);for(let t=ee(this.heap.length-1);0<=t;t--)this.percDown(t);return this}}var ht=o(function(e,t){if(t=m(t),!Array.isArray(e))return t(new TypeError(\"First argument to race must be an array of functions\"));if(!e.length)return t();for(var a=0,n=e.length;a<n;a++)d(e[a])(t)},2),ft=o(function(e,t,a){return se(Me,e,t,a)},3),yt=o(function(e,t,a,n){return se(Oe(t),e,a,n)},4),mt=o(function(e,t,a){return se(je,e,t,a)},3);const gt=5,kt=0;var vt=o(function(e,t,a){return R(Boolean,e=>e)(Me,e,t,a)},3),St=o(function(e,t,a,n){return R(Boolean,e=>e)(Oe(t),e,a,n)},4),Lt=o(function(e,t,a){return R(Boolean,e=>e)(je,e,t,a)},3),xt=o(function(e,t,a){function n(e,t){var n=e.criteria,a=t.criteria;return n<a?-1:n>a?1:0}var i=d(t);return Ae(e,(e,t)=>{i(e,(a,n)=>a?t(a):void t(a,{value:e,criteria:n}))},(e,t)=>e?a(e):void a(null,t.sort(n).map(e=>e.value)))},3),Et=o(function(e,t){var a,n=null;return $e(e,(e,t)=>{d(e)((e,...i)=>!1===e?t(e):void(2>i.length?[a]=i:a=i,n=e,t(e?null:{})))},()=>t(n,a))}),bt=o(function(e,t,a){function n(e,...t){if(e)return a(e);l=t;!1===e||s(i)}function i(e,t){return e?a(e):!1===e?void 0:t?void r(n):a(null,...l)}a=x(a);var r=d(t),s=d(e),l=[];return s(i)},3),Ot=o(function(e,t){function a(t){var a=d(e[i++]);a(...t,x(n))}function n(n,...r){return!1===n?void 0:n||i===e.length?t(n,...r):void a(r)}if(t=m(t),!Array.isArray(e))return t(new Error(\"First argument to waterfall must be an array of functions\"));if(!e.length)return t();var i=0;a([])});e.default={apply:t,applyEach:Ie,applyEachSeries:Be,asyncify:r,auto:M,autoInject:I,cargo:B,cargoQueue:F,compose:C,concat:Qe,concatLimit:De,concatSeries:Ue,constant:P,detect:Ge,detectLimit:We,detectSeries:He,dir:Je,doUntil:N,doWhilst:Ke,each:Xe,eachLimit:Ze,eachOf:Me,eachOfLimit:_e,eachOfSeries:je,eachSeries:$e,ensureAsync:Y,every:et,everyLimit:tt,everySeries:at,filter:nt,filterLimit:it,filterSeries:rt,forever:st,groupBy:U,groupByLimit:lt,groupBySeries:G,log:ut,map:Ae,mapLimit:qe,mapSeries:we,mapValues:W,mapValuesLimit:ct,mapValuesSeries:H,memoize:J,nextTick:pt,parallel:K,parallelLimit:X,priorityQueue:ae,queue:Z,race:ht,reduce:Ye,reduceRight:ne,reflect:ie,reflectAll:re,reject:ft,rejectLimit:yt,rejectSeries:mt,retry:ue,retryable:pe,seq:T,series:de,setImmediate:Ee,some:vt,someLimit:St,someSeries:Lt,sortBy:xt,timeout:oe,times:ye,timesLimit:fe,timesSeries:me,transform:ge,tryEach:Et,unmemoize:ke,until:ve,waterfall:Ot,whilst:bt,all:et,allLimit:tt,allSeries:at,any:vt,anyLimit:St,anySeries:Lt,find:Ge,findLimit:We,findSeries:He,flatMap:Qe,flatMapLimit:De,flatMapSeries:Ue,forEach:Xe,forEachSeries:$e,forEachLimit:Ze,forEachOf:Me,forEachOfSeries:je,forEachOfLimit:_e,inject:Ye,foldl:Ye,foldr:ne,select:nt,selectLimit:it,selectSeries:rt,wrapSync:r,during:bt,doDuring:Ke},e.apply=t,e.applyEach=Ie,e.applyEachSeries=Be,e.asyncify=r,e.auto=M,e.autoInject=I,e.cargo=B,e.cargoQueue=F,e.compose=C,e.concat=Qe,e.concatLimit=De,e.concatSeries=Ue,e.constant=P,e.detect=Ge,e.detectLimit=We,e.detectSeries=He,e.dir=Je,e.doUntil=N,e.doWhilst=Ke,e.each=Xe,e.eachLimit=Ze,e.eachOf=Me,e.eachOfLimit=_e,e.eachOfSeries=je,e.eachSeries=$e,e.ensureAsync=Y,e.every=et,e.everyLimit=tt,e.everySeries=at,e.filter=nt,e.filterLimit=it,e.filterSeries=rt,e.forever=st,e.groupBy=U,e.groupByLimit=lt,e.groupBySeries=G,e.log=ut,e.map=Ae,e.mapLimit=qe,e.mapSeries=we,e.mapValues=W,e.mapValuesLimit=ct,e.mapValuesSeries=H,e.memoize=J,e.nextTick=pt,e.parallel=K,e.parallelLimit=X,e.priorityQueue=ae,e.queue=Z,e.race=ht,e.reduce=Ye,e.reduceRight=ne,e.reflect=ie,e.reflectAll=re,e.reject=ft,e.rejectLimit=yt,e.rejectSeries=mt,e.retry=ue,e.retryable=pe,e.seq=T,e.series=de,e.setImmediate=Ee,e.some=vt,e.someLimit=St,e.someSeries=Lt,e.sortBy=xt,e.timeout=oe,e.times=ye,e.timesLimit=fe,e.timesSeries=me,e.transform=ge,e.tryEach=Et,e.unmemoize=ke,e.until=ve,e.waterfall=Ot,e.whilst=bt,e.all=et,e.allLimit=tt,e.allSeries=at,e.any=vt,e.anyLimit=St,e.anySeries=Lt,e.find=Ge,e.findLimit=We,e.findSeries=He,e.flatMap=Qe,e.flatMapLimit=De,e.flatMapSeries=Ue,e.forEach=Xe,e.forEachSeries=$e,e.forEachLimit=Ze,e.forEachOf=Me,e.forEachOfSeries=je,e.forEachOfLimit=_e,e.inject=Ye,e.foldl=Ye,e.foldr=ne,e.select=nt,e.selectLimit=it,e.selectSeries=rt,e.wrapSync=r,e.during=bt,e.doDuring=Ke,Object.defineProperty(e,\"__esModule\",{value:!0})}<\/p>","reference":"<p>http://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/<\/p>","cweid":"540","wascid":"13","sourceid":"3"},{"pluginid":"10108","alertRef":"10108","alert":"Reverse Tabnabbing","name":"Reverse Tabnabbing","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the \"noopener\" and \"noreferrer\" keywords in the \"rel\" attribute, which allows the target page to take control of this page.<\/p>","instances":[{"uri":"https://my.fabnum.fr/","method":"GET","evidence":"<a class=\"offline-banner animateMe\" ng-show=\"client.offline\" ng-cloak href=\"https://docs.cloudron.io/troubleshooting/\" target=\"_blank\"><i class=\"fa fa-circle-notch fa-spin\"><\/i> {{ 'main.offline' | tr }}<\/a>"}],"count":"1","solution":"<p>Do not use a target attribute, or if you have to then also add the attribute: rel=\"noopener noreferrer\".<\/p>","reference":"<p>https://owasp.org/www-community/attacks/Reverse_Tabnabbing<\/p><p>https://dev.to/ben/the-targetblank-vulnerability-by-example<\/p><p>https://mathiasbynens.github.io/rel-noopener/<\/p><p>https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c<\/p>","sourceid":"3"},{"pluginid":"10055","alertRef":"10055","alert":"CSP: style-src unsafe-inline","name":"CSP: style-src unsafe-inline","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>style-src includes unsafe-inline.<\/p>","instances":[{"uri":"https://my.fabnum.fr/","method":"GET","evidence":"default-src 'none'; frame-src 'self' cloudron.io *.cloudron.io; connect-src wss: https: 'self' *.cloudron.io; script-src https: 'self' 'unsafe-inline' 'unsafe-eval'; img-src * data:; style-src https: 'unsafe-inline'; object-src 'none'; font-src https: 'self'; frame-ancestors 'none'; base-uri 'none'; form-action 'self';"}],"count":"1","solution":"<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.<\/p>","reference":"<p>http://www.w3.org/TR/CSP2/<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://caniuse.com/#search=content+security+policy<\/p><p>http://content-security-policy.com/<\/p><p>https://github.com/shapesecurity/salvation<\/p><p>https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources<\/p>","cweid":"693","wascid":"15","sourceid":"3"},{"pluginid":"10037","alertRef":"10037","alert":"Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)","name":"Server Leaks Information via \"X-Powered-By\" HTTP Response Header Field(s)","riskcode":"1","confidence":"2","riskdesc":"Low (Medium)","desc":"<p>The web/application server is leaking information via one or more \"X-Powered-By\" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.<\/p>","instances":[{"uri":"https://my.fabnum.fr/api/v1/cloudron/avatar","method":"GET","evidence":"X-Powered-By: Express"}],"count":"1","solution":"<p>Ensure that your web server, application server, load balancer, etc. is configured to suppress \"X-Powered-By\" headers.<\/p>","reference":"<p>http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx<\/p><p>http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html<\/p>","cweid":"200","wascid":"13","sourceid":"3"},{"pluginid":"10049","alertRef":"10049","alert":"Storable but Non-Cacheable Content","name":"Storable but Non-Cacheable Content","riskcode":"0","confidence":"2","riskdesc":"Informational (Medium)","desc":"<p>The response contents are storable by caching components such as proxy servers, but will not be retrieved directly from the cache, without validating the request upstream, in response to similar requests from other users. <\/p>","instances":[{"uri":"https://my.fabnum.fr/api/v1/cloudron/avatar","method":"GET","evidence":"no-cache"}],"count":"1","solution":"<p><\/p>","reference":"<p>https://tools.ietf.org/html/rfc7234<\/p><p>https://tools.ietf.org/html/rfc7231<\/p><p>http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html (obsoleted by rfc7234)<\/p>","cweid":"524","wascid":"13","sourceid":"3"},{"pluginid":"10055","alertRef":"10055","alert":"CSP: Wildcard Directive","name":"CSP: Wildcard Directive","riskcode":"2","confidence":"2","riskdesc":"Medium (Medium)","desc":"<p>The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: <\/p><p>script-src, style-src, img-src, connects-src, font-src, worker-src<\/p>","instances":[{"uri":"https://my.fabnum.fr/","method":"GET","evidence":"default-src 'none'; frame-src 'self' cloudron.io *.cloudron.io; connect-src wss: https: 'self' *.cloudron.io; script-src https: 'self' 'unsafe-inline' 'unsafe-eval'; img-src * data:; style-src https: 'unsafe-inline'; object-src 'none'; font-src https: 'self'; frame-ancestors 'none'; base-uri 'none'; form-action 'self';"}],"count":"1","solution":"<p>Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.<\/p>","reference":"<p>http://www.w3.org/TR/CSP2/<\/p><p>http://www.w3.org/TR/CSP/<\/p><p>http://caniuse.com/#search=content+security+policy<\/p><p>http://content-security-policy.com/<\/p><p>https://github.com/shapesecurity/salvation<\/p><p>https://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources<\/p>","cweid":"693","wascid":"15","sourceid":"3"}]}]}